#include <ros/ros.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/PoseStamped.h>

#include <moveit/planning_scene_monitor/planning_scene_monitor.h>
#include <moveit/move_group_interface/move_group.h>
#include <geometric_shapes/solid_primitive_dims.h>
#include <moveit/planning_scene_interface/planning_scene_interface.h>

// MoveIt!
#include <moveit_msgs/PlanningScene.h>
#include <moveit_msgs/AttachedCollisionObject.h>
#include <moveit_msgs/CollisionObject.h>
#include <moveit_msgs/GetStateValidity.h>

#include <moveit_msgs/DisplayRobotState.h>
#include <moveit_msgs/DisplayTrajectory.h>

#include <moveit/robot_model_loader/robot_model_loader.h>
#include <moveit/robot_state/robot_state.h>
#include <moveit/robot_state/conversions.h>

// TF

#include <tf/transform_datatypes.h>

int main(int argc, char **argv)
{
  ros::init (argc, argv, "stir_action");
  ros::AsyncSpinner spinner(3);
  spinner.start() ;

  // We will use the :planning_scene_interface:`PlanningSceneInterface
  // class to deal directly with the world.
  moveit::planning_interface::PlanningSceneInterface planning_scene_interface;  


  ros::NodeHandle nh;
 
  ros::Duration sleep_time(10.0);

  ros::WallDuration(5.0).sleep();

  moveit::planning_interface::MoveGroup group("five_dof_arm");
  //moveit::planning_interface::MoveGroup eff("end_effector");
  group.setPlanningTime(45.0);

  // (Optional) Create a publisher for visualizing plans in Rviz.
  ros::Publisher display_publisher = nh.advertise<moveit_msgs::DisplayTrajectory>("/move_group/display_planned_path", 1, true);
  moveit_msgs::DisplayTrajectory display_trajectory;

  // Planning to a Pose goal
  // ^^^^^^^^^^^^^^^^^^^^^^^
  // We can plan a motion for this group to a desired pose for the 
  // end-effector.
  geometry_msgs::Pose target_pose1;
  //target_pose1.orientation = tf::createQuaternionMsgFromRollPitchYaw(0.0,-1.5707,1.5707) ;
  target_pose1.position.x = 0.2;
  target_pose1.position.y = 0.0;
  target_pose1.position.z = 0.1;

  target_pose1.orientation.x = 0.0;
  target_pose1.orientation.y = 0.699065;
  target_pose1.orientation.z = 0.0;
  target_pose1.orientation.w = 0.715059;
 
  group.setPoseTarget(target_pose1);


  // Now, we call the planner to compute the plan
  // and visualize it.
  // Note that we are just planning, not asking move_group 
  // to actually move the robot.
  moveit::planning_interface::MoveGroup::Plan my_plan;
  bool success = group.plan(my_plan);

  ROS_INFO("Visualizing plan 1 (pose goal) %s",success?"":"FAILED");    
  /* Sleep to give Rviz time to visualize the plan. */
  sleep(5.0);

  group.move() ;

  sleep(5.0) ;

  std::vector<geometry_msgs::Pose> waypoints;

  geometry_msgs::Pose pose2,pose3,pose4 ;

  //Pose 2
  pose2.position.x = 0.3;
  pose2.position.y = 0.1
  pose2.position.z = 0.1;

  pose2.orientation.x = -0.1150 
  pose2.orientation.y = 0.5700
  pose2.orientation.z = 0.161055
  pose2.orientation.w = 0.797881

  waypoints.push_back(pose2);  

  //Pose 3
  pose3.position.x = 0.4;
  pose3.position.y = 0.0
  pose3.position.z = 0.1;

  pose3.orientation.x = 0.0 
  pose3.orientation.y = 0.408649
  pose3.orientation.z = 0.0
  pose3.orientation.w = 0.912692

  waypoints.push_back(pose3);  

  //Pose 4
  pose3.position.x = 0.3;
  pose3.position.y = -0.1
  pose3.position.z = 0.1;

  pose3.orientation.x = 0.0867883 
  pose3.orientation.y = 0.555869
  pose3.orientation.z = -0.127533
  pose3.orientation.w = 0.816831

  waypoints.push_back(pose3);  // up and out

  moveit_msgs::RobotTrajectory trajectory;
  double fraction = group.computeCartesianPath(waypoints,
                                             0.05,  // eef_step
                                             0.0,   // jump_threshold
                                             trajectory);

  ROS_INFO("Visualizing plan 4 (cartesian path) (%.2f%% acheived)", fraction * 100.0);
  /* Sleep to give Rviz time to visualize the plan. */
  sleep(20.0);

  std::vector<double> RPY, JointValues ;
  RPY = group.getCurrentRPY() ;
  JointValues = group.getCurrentJointValues() ;

  geometry_msgs::PoseStamped eff_pose ;
  eff_pose = group.getCurrentPose() ;

  std::stringstream ss;
  std::cout.precision(5);
  for (std::size_t i = 0; i < RPY.size() ; ++i)
  {
    ss << std::fixed << RPY[i] << "\t ";
  } 

  ROS_INFO_STREAM("RPY are: " << ss.str() ) ;


  for (std::size_t i = 0; i < JointValues.size() ; ++i)
  {
    ss << std::fixed << JointValues[i] << "\t ";
  } 

  ROS_INFO_STREAM("Joint Values are: " << ss.str() ) ;

  ss << std::fixed << eff_pose << "\t" ;
  ROS_INFO_STREAM("Pose is: " << ss.str() ) ;

  ros::waitForShutdown();
  return 0;
}
